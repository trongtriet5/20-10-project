'use client';

import { useState, useEffect, useRef, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import { motion } from 'framer-motion';
import { Heart, Sparkles, Download, Volume2, VolumeX, Link as LinkIcon, Check } from 'lucide-react';
import html2canvas from 'html2canvas';
import ResponsiveContainer from '@/components/ResponsiveContainer';
import Fireworks from '@/components/Fireworks';
import RichTextEditor from '@/components/RichTextEditor';
import QRCodeGenerator from '@/components/QRCodeGenerator';
import { encodeForUrl } from '@/utils/base64';

function HomeContent() {
  const searchParams = useSearchParams();
  const [name, setName] = useState('');
  const [showWish, setShowWish] = useState(false);
  const [showFireworks, setShowFireworks] = useState(false);
  const [showLetter, setShowLetter] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [showMusicPrompt, setShowMusicPrompt] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  const [copied, setCopied] = useState(false);
  const [editorHtml, setEditorHtml] = useState('');
  const [selectedWish, setSelectedWish] = useState<string | null>(null);
  const [mode, setMode] = useState<'self' | 'send'>('self');
  const [selectedFont, setSelectedFont] = useState<string>("Inter, Arial, sans-serif");
  const [isLoadingSharedData, setIsLoadingSharedData] = useState(false);
  const [showQRCode, setShowQRCode] = useState(false);
  const [shareUrl, setShareUrl] = useState('');
  const audioRef = useRef<HTMLAudioElement>(null);

  // Load shared data if URL contains it
  useEffect(() => {
    const d = searchParams.get('d');
    if (d) {
      setIsLoadingSharedData(true);
      try {
        // Decode shared data
        const json = decodeURIComponent(escape(atob(d)));
        const sharedData = JSON.parse(json) as { name: string; message: string; font?: string };
        
        // Set the shared data but don't show wish yet
        setName(sharedData.name);
        setSelectedFont(sharedData.font || "Inter, Arial, sans-serif");
        setMode('send');
        
        // Auto-trigger the letter opening animation first
        setTimeout(() => {
          setShowWish(true);
          setShowLetter(true);
          // Set the wish content after animation starts
          setTimeout(() => {
            setSelectedWish(sharedData.message);
            setIsLoadingSharedData(false);
          }, 1500); // Delay to ensure animation is visible
        }, 1000); // Delay to show the opening animation
        
      } catch (error) {
        console.error('Error decoding shared data:', error);
        setIsLoadingSharedData(false);
      }
    }
  }, [searchParams]);

  // Kh·ªüi t·∫°o nh·∫°c n·ªÅn v·ªõi nhi·ªÅu c√°ch ti·∫øp c·∫≠n
  useEffect(() => {
    const initAudio = async () => {
      if (audioRef.current && !isInitialized) {
        audioRef.current.loop = true;
        audioRef.current.volume = 0.2;
        
        // Th·ª≠ ph√°t nh·∫°c ngay l·∫≠p t·ª©c
        try {
          await audioRef.current.play();
          setIsMuted(false);
          setShowMusicPrompt(false);
        } catch {
          // Autoplay b·ªã ch·∫∑n, th·ª≠ l·∫°i sau
          setShowMusicPrompt(true);
        }
        
        setIsInitialized(true);
      }
    };

    // Th·ª≠ ph√°t nh·∫°c ngay l·∫≠p t·ª©c
    initAudio();
  }, [isInitialized]);

  // Th·ª≠ ph√°t nh·∫°c khi c√≥ t∆∞∆°ng t√°c ƒë·∫ßu ti√™n
  useEffect(() => {
    const handleUserInteraction = () => {
      if (audioRef.current && showMusicPrompt && !isMuted) {
        audioRef.current.play().then(() => {
          setShowMusicPrompt(false);
          setIsMuted(false);
        }).catch(() => {
          // V·∫´n kh√¥ng th·ªÉ ph√°t nh·∫°c
        });
      }
    };

    // L·∫Øng nghe m·ªçi t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng
    document.addEventListener('click', handleUserInteraction, { once: true });
    document.addEventListener('keydown', handleUserInteraction, { once: true });
    document.addEventListener('touchstart', handleUserInteraction, { once: true });

    return () => {
      document.removeEventListener('click', handleUserInteraction);
      document.removeEventListener('keydown', handleUserInteraction);
      document.removeEventListener('touchstart', handleUserInteraction);
    };
  }, [showMusicPrompt, isMuted]);
  // Auto-load Google Fonts when selected
  useEffect(() => {
    const fontToHref: Record<string, string> = {
      "'Dancing Script', cursive": 'https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;600;700&display=swap',
      "'Pacifico', cursive": 'https://fonts.googleapis.com/css2?family=Pacifico&display=swap',
      "'Great Vibes', cursive": 'https://fonts.googleapis.com/css2?family=Great+Vibes&display=swap',
      "'Lobster', cursive": 'https://fonts.googleapis.com/css2?family=Lobster&display=swap',
      "'Playfair Display', serif": 'https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&display=swap',
    };
    const href = fontToHref[selectedFont];
    if (!href) return;
    const id = `gf-${btoa(selectedFont).replace(/=/g, '')}`;
    if (document.getElementById(id)) return;
    const link = document.createElement('link');
    link.id = id;
    link.rel = 'stylesheet';
    link.href = href;
    document.head.appendChild(link);
    return () => {
      // keep font loaded for navigation; do not remove
    };
  }, [selectedFont]);



  // X·ª≠ l√Ω t·∫Øt/b·∫≠t nh·∫°c
  const toggleMusic = () => {
    if (audioRef.current) {
      if (isMuted) {
        audioRef.current.play();
        setIsMuted(false);
      } else {
        audioRef.current.pause();
        setIsMuted(true);
      }
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (name.trim()) {
      // Hi·ªáu ·ª©ng ph√°o hoa
      setShowFireworks(true);
      // C·ªë ƒë·ªãnh icon v√† l·ªùi ch√∫c ƒë·ªÉ kh√¥ng thay ƒë·ªïi khi re-render
      // S·ª≠ d·ª•ng icon Heart c·ªë ƒë·ªãnh (kh√¥ng c·∫ßn set state)
      const fixedWish = (mode === 'send') ? (sanitizeHtml(editorHtml).trim() ? sanitizeHtml(editorHtml) : textToHtml(randomWish)) : randomWish;
      setSelectedWish(fixedWish);
      setTimeout(() => {
        setShowFireworks(false);
        setShowLetter(true); // Hi·ªÉn th·ªã b·ª©c th∆∞ thay v√¨ l·ªùi ch√∫c
      }, 2000); // Hi·ªáu ·ª©ng k√©o d√†i 2 gi√¢y
    }
  };

  const handleOpenLetter = () => {
    setShowLetter(false);
    setShowWish(true);
  };

  const handleExportLetter = async () => {
    try {
      // T·∫°o m·ªôt b·ª©c th∆∞ ƒë√£ m·ªü ƒë·ªÉ xu·∫•t h√¨nh ·∫£nh (ch·ªâ n·ªôi dung, kh√¥ng c√≥ button)
      const letterElement = document.createElement('div');
      letterElement.style.cssText = `
        position: absolute;
        left: -9999px;
        top: -9999px;
        width: 500px;
        height: 700px;  
        background: linear-gradient(135deg, #fce7f3, #fdf2f8);
        border-radius: 20px;
        box-shadow: 0 30px 60px -12px rgba(0, 0, 0, 0.3);
        padding: 40px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      `;
      
      // T·∫°o n·ªôi dung b·ª©c th∆∞ ƒë√£ m·ªü
      const letterContent = document.createElement('div');
      letterContent.style.cssText = `
        width: 100%;
        max-width: 420px;
        background: white;
        border-radius: 20px;
        padding: 50px 40px;
        box-shadow: 0 15px 25px -5px rgba(0, 0, 0, 0.15);
        position: relative;
        text-align: center;
      `;
      
      // Icon ch√≠nh - s·ª≠ d·ª•ng icon ng·∫´u nhi√™n nh∆∞ trong giao di·ªán
      const iconContainer = document.createElement('div');
      iconContainer.style.cssText = `
        margin: 0 auto 35px;
        display: flex;
        justify-content: center;
        align-items: center;
      `;
      
      // T·∫°o SVG cho icon ng·∫´u nhi√™n
      const iconSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      iconSvg.setAttribute('width', '100');
      iconSvg.setAttribute('height', '100');
      iconSvg.setAttribute('viewBox', '0 0 24 24');
      iconSvg.setAttribute('fill', 'none');
      // Chuy·ªÉn ƒë·ªïi m√†u t·ª´ Tailwind class sang hex
      const colorMap = {
        'text-pink-500': '#ec4899',
        'text-pink-400': '#f472b6', 
        'text-pink-300': '#f9a8d4',
        'text-purple-400': '#c084fc',
        'text-purple-500': '#a855f7',
        'text-yellow-400': '#facc15',
        'text-yellow-300': '#fde047',
        'text-blue-400': '#60a5fa',
        'text-red-400': '#f87171',
        'text-rose-400': '#fb7185'
      };
      const strokeColor = colorMap[heartIcon.color as keyof typeof colorMap] || '#ec4899';
      iconSvg.setAttribute('stroke', strokeColor);
      iconSvg.setAttribute('stroke-width', '2');
      iconSvg.setAttribute('stroke-linecap', 'round');
      iconSvg.setAttribute('stroke-linejoin', 'round');
      
      // T·∫°o path cho icon d·ª±a tr√™n icon ƒë∆∞·ª£c ch·ªçn
      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      
      // ƒê·ªãnh nghƒ©a path cho t·ª´ng icon
      const iconPath = 'M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.29 1.51 4.04 3 5.5l7 7Z';
      
      // S·ª≠ d·ª•ng icon Heart c·ªë ƒë·ªãnh
      
      path.setAttribute('d', iconPath);
      iconSvg.appendChild(path);
      iconContainer.appendChild(iconSvg);
      
      // Ti√™u ƒë·ªÅ
      const title = document.createElement('h2');
      title.textContent = `Th∆∞ g·ª≠i t·ªõi ${name} üíï`;
      title.style.cssText = `
        font-size: 36px;
        font-weight: bold;
        color: #be185d;
        margin: 0 0 40px 0;
        text-align: center;
        font-family: ${selectedFont};
        line-height: 1.2;
      `;
      
      // N·ªôi dung l·ªùi ch√∫c
      const wishContent = document.createElement('div');
      wishContent.style.cssText = `
        background: linear-gradient(135deg, #fdf2f8, #fce7f3);
        border-radius: 20px;
        padding: 35px;
        margin: 30px 0;
        border-left: 6px solid #ec4899;
        box-shadow: 0 6px 12px -2px rgba(0, 0, 0, 0.1);
      `;
      
      const wishText = document.createElement('div');
      const finalWishForImage = selectedWish || ((mode === 'send') ? (sanitizeHtml(editorHtml).trim() ? sanitizeHtml(editorHtml) : textToHtml(randomWish)) : textToHtml(randomWish));
      wishText.innerHTML = finalWishForImage;
      wishText.style.cssText = `
        font-size: 20px;
        color: #be185d;
        line-height: 1.8;
        margin: 0;
        text-align: left;
        font-family: ${selectedFont};
      `;
      
      // Ch·ªØ k√Ω
      const signature = document.createElement('div');
      signature.style.cssText = `
        text-align: right;
        margin-top: 50px;
        margin-bottom: 20px;
        font-style: italic;
        color: #ec4899;
        font-size: 18px;
        font-family: 'Arial', sans-serif;
      `;
      signature.textContent = 'V·ªõi t·∫•t c·∫£ t√¨nh y√™u th∆∞∆°ng ‚ù§Ô∏è';
      
      
      // Th√™m m·ªôt s·ªë trang tr√≠ nh·ªè
      const decorations = document.createElement('div');
      decorations.style.cssText = `
        position: absolute;
        bottom: 35px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 12px;
      `;
      
      for (let i = 0; i < 10; i++) {
        const star = document.createElement('div');
        star.innerHTML = '‚ú¶';
        star.style.cssText = `
          color: #f472b6;
          font-size: 20px;
          opacity: 0.8;
        `;
        decorations.appendChild(star);
      }
      
      // L·∫Øp r√°p c√°c ph·∫ßn t·ª≠
      wishContent.appendChild(wishText);
      letterContent.appendChild(iconContainer);
      letterContent.appendChild(title);
      letterContent.appendChild(wishContent);
      letterContent.appendChild(signature);
      letterContent.appendChild(decorations);
      letterElement.appendChild(letterContent);
      
      document.body.appendChild(letterElement);

      const canvas = await html2canvas(letterElement, {
        backgroundColor: null,
        scale: 2,
        useCORS: true,
        allowTaint: true,
        logging: false,
        width: 500,
        height: 700,
      });

      const fileName = `thu-chuc-mung-20-10-${name || 'ban'}.png`;
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

      await new Promise<void>((resolve) => {
        canvas.toBlob(async (blob) => {
          if (!blob) {
            // Fallback: m·ªü tab m·ªõi v·ªõi dataURL
            const dataUrl = canvas.toDataURL('image/png');
            const win = window.open();
            if (win) {
              win.document.write(`<html><head><title>${fileName}</title></head><body style=\"margin:0;background:#fff;display:flex;align-items:center;justify-content:center;\"><img src='${dataUrl}' style='max-width:100%;height:auto' /></body></html>`);
            }
            resolve();
            return;
          }

          if (isMobile) {
            // ƒêi·ªán tho·∫°i: s·ª≠ d·ª•ng Web Share API ƒë·ªÉ l∆∞u v√†o album ·∫£nh
            try {
              const file = new File([blob], fileName, { type: 'image/png' });
              if (navigator.canShare && navigator.canShare({ files: [file] }) && navigator.share) {
                await navigator.share({ 
                  files: [file], 
                  title: fileName, 
                  text: 'L∆∞u h√¨nh ·∫£nh l·ªùi ch√∫c 20/10 v√†o album ·∫£nh' 
                });
                resolve();
                return;
              }
            } catch (error) {
              console.log('Web Share API failed:', error);
            }
            
            // Fallback cho ƒëi·ªán tho·∫°i: m·ªü tab m·ªõi ƒë·ªÉ long-press l∆∞u
            const dataUrl = canvas.toDataURL('image/png');
            const win = window.open();
            if (win) {
              win.document.write(`<html><head><meta name='viewport' content='width=device-width, initial-scale=1' /><title>${fileName}</title></head><body style=\"margin:0;background:#fff;display:flex;align-items:center;justify-content:center;\"><img src='${dataUrl}' style='max-width:100%;height:auto' /></body></html>`);
            }
            resolve();
          } else {
            // M√°y t√≠nh: download file nh∆∞ b√¨nh th∆∞·ªùng
            const blobUrl = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = blobUrl;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(blobUrl);
            resolve();
          }
        }, 'image/png');
      });

      // D·ªçn d·∫πp ph·∫ßn t·ª≠ t·∫°m
      document.body.removeChild(letterElement);
    } catch {
      console.error('L·ªói khi xu·∫•t h√¨nh ·∫£nh');
      alert('C√≥ l·ªói x·∫£y ra khi xu·∫•t h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!');
    }
  };

  const handleCreateShareLink = async () => {
    try {
      const payload = {
        name,
        message: (selectedWish || ((mode === 'send') ? (sanitizeHtml(editorHtml).trim() ? sanitizeHtml(editorHtml) : textToHtml(randomWish)) : textToHtml(randomWish))),
        iconIndex: 0, // S·ª≠ d·ª•ng icon Heart c·ªë ƒë·ªãnh (index 0)
        font: selectedFont,
      };
      
      // T·∫°o link g·ªëc v·ªõi base64
      const baseUrl = `${window.location.origin}/read`;
      const base64 = encodeForUrl(payload);
      const originalUrl = `${baseUrl}?d=${encodeURIComponent(base64)}`;
      
      setShareUrl(originalUrl);
      setShowQRCode(true);

      await navigator.clipboard.writeText(originalUrl);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (e) {
      console.error('Copy failed', e);
      alert('Kh√¥ng th·ªÉ copy link. B·∫°n h√£y th·ª≠ l·∫°i nh√©!');
    }
  };




  const wishes = [
    "Ch√∫c n√†ng m·ªôt ng√†y 20/10 tr√†n ng·∫≠p y√™u th∆∞∆°ng v√† ti·∫øng c∆∞·ªùi! Mong r·∫±ng nh·ªØng ∆∞·ªõc m∆° nh·ªè b√© c·ªßa n√†ng ƒë·ªÅu s·∫Ω tr·ªü th√†nh hi·ªán th·ª±c, v√† m·ªói ng√†y ƒë·ªÅu mang ƒë·∫øn cho n√†ng ni·ªÅm vui, h·∫°nh ph√∫c c√πng nh·ªØng ƒëi·ªÅu b·∫•t ng·ªù ƒë√°ng y√™u nh·∫•t! üíê",
  
    "Nh√¢n ng√†y Ph·ª• n·ªØ Vi·ªát Nam 20/10, ch√∫c n√†ng m√£i xinh ƒë·∫πp, r·∫°ng r·ª° v√† t·ªèa s√°ng nh∆∞ √°nh m·∫∑t tr·ªùi! H√£y lu√¥n gi·ªØ n·ª• c∆∞·ªùi tr√™n m√¥i v√† tr√°i tim tr√†n ƒë·∫ßy y√™u th∆∞∆°ng nh√©! üåû",
  
    "Ch√∫c n√†ng ‚Äì ng∆∞·ªùi ph·ª• n·ªØ tuy·ªát v·ªùi ‚Äì c√≥ m·ªôt ng√†y 20/10 th·∫≠t ƒë√°ng nh·ªõ! Mong n√†ng lu√¥n ƒë∆∞·ª£c y√™u th∆∞∆°ng, tr√¢n tr·ªçng v√† h·∫°nh ph√∫c tr√™n h√†nh tr√¨nh c·ªßa ri√™ng m√¨nh. M·ªói b∆∞·ªõc ƒëi c·ªßa n√†ng ƒë·ªÅu l√† ni·ªÅm t·ª± h√†o c·ªßa nh·ªØng ng∆∞·ªùi xung quanh! üíñ",
  
    "20/10 ‚Äì ng√†y c·ªßa y√™u th∆∞∆°ng! Ch√∫c n√†ng lu√¥n gi·ªØ ƒë∆∞·ª£c s·ª± d·ªãu d√†ng, tinh t·∫ø v√† ni·ªÅm tin m·∫°nh m·∫Ω trong tim. D√π cu·ªôc s·ªëng c√≥ b·∫≠n r·ªôn ƒë·∫øn ƒë√¢u, h√£y lu√¥n d√†nh cho m√¨nh nh·ªØng ph√∫t gi√¢y b√¨nh y√™n v√† h·∫°nh ph√∫c nh√©! üå∑",
  
    "Ch√∫c n√†ng 20/10 th·∫≠t √Ω nghƒ©a, ƒë∆∞·ª£c nh·∫≠n nhi·ªÅu l·ªùi ch√∫c t·ªët ƒë·∫πp, nhi·ªÅu m√≥n qu√† d·ªÖ th∆∞∆°ng v√† th·∫≠t nhi·ªÅu ni·ªÅm vui. Mong m·ªçi ƒëi·ªÅu n√†ng mong ∆∞·ªõc ƒë·ªÅu s·ªõm tr·ªü th√†nh hi·ªán th·ª±c! üéÅ",
  
    "Ch√∫c n√†ng lu√¥n xinh ƒë·∫πp, h·∫°nh ph√∫c v√† th√†nh c√¥ng kh√¥ng ch·ªâ trong ng√†y 20/10 m√† trong su·ªët 365 ng√†y c√≤n l·∫°i! C·∫£m ∆°n n√†ng v√¨ ƒë√£ lan t·ªèa nƒÉng l∆∞·ª£ng t√≠ch c·ª±c v√† y√™u th∆∞∆°ng ƒë·∫øn m·ªçi ng∆∞·ªùi xung quanh. üåº",
  
    "20/10 l√† d·ªãp ƒë·∫∑c bi·ªát ƒë·ªÉ n√≥i r·∫±ng: N√†ng l√† ng∆∞·ªùi ph·ª• n·ªØ tuy·ªát v·ªùi! Mong n√†ng lu√¥n gi·ªØ ƒë∆∞·ª£c ng·ªçn l·ª≠a ƒëam m√™ trong c√¥ng vi·ªác, s·ª± d·ªãu d√†ng trong t√¢m h·ªìn v√† t√¨nh y√™u th∆∞∆°ng trong cu·ªôc s·ªëng. üå∏",
  
    "Ch√∫c n√†ng c√≥ m·ªôt ng√†y 20/10 ng·ªçt ng√†o nh∆∞ nh·ªØng b√¥ng hoa s·ªõm mai, r·ª±c r·ª° nh∆∞ √°nh n·∫Øng m√πa thu v√† h·∫°nh ph√∫c nh∆∞ ch√≠nh n·ª• c∆∞·ªùi c·ªßa n√†ng. H√£y t·∫≠n h∆∞·ªüng ng√†y h√¥m nay th·∫≠t tr·ªçn v·∫πn nh√©! üåπ",
  
    "M·ªói ng∆∞·ªùi ph·ª• n·ªØ ƒë·ªÅu l√† m·ªôt b√¥ng hoa ƒë·∫πp theo c√°ch ri√™ng c·ªßa m√¨nh ‚Äì v√† n√†ng ch√≠nh l√† ƒë√≥a hoa khi·∫øn th·∫ø gi·ªõi n√†y tr·ªü n√™n d·ªãu d√†ng h∆°n. Ch√∫c n√†ng 20/10 th·∫≠t r·ª±c r·ª° v√† tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng! üå∫",
  
    "Nh√¢n ng√†y 20/10, ch√∫c n√†ng lu√¥n c√≥ ni·ªÅm tin v·ªØng v√†ng, s·ª©c kh·ªèe d·ªìi d√†o v√† t√¢m h·ªìn th·∫≠t b√¨nh an. H√£y lu√¥n y√™u th∆∞∆°ng b·∫£n th√¢n v√† s·ªëng h·∫øt m√¨nh v·ªõi nh·ªØng ƒëi·ªÅu n√†ng ƒëam m√™ nh√©! ‚ú®"
  ];
    

  const randomWish = wishes[Math.floor(Math.random() * wishes.length)];

  // M·∫£ng c√°c icon cute
  // Ch·ªâ s·ª≠ d·ª•ng icon Heart c·ªë ƒë·ªãnh
  const heartIcon = { icon: Heart, color: "text-pink-500", name: 'Heart' };

  // S·ª≠ d·ª•ng icon Heart c·ªë ƒë·ªãnh
  const IconComponent = heartIcon.icon;
  const displayIconColor = heartIcon.color;

  // Simple sanitizer to allow basic formatting and emoji
  function sanitizeHtml(input: string): string {
    const template = document.createElement('template');
    template.innerHTML = input;
    const allowedTags = new Set(['B', 'I', 'U', 'BR', 'DIV', 'P', 'SPAN']);
    const walker = document.createTreeWalker(template.content, NodeFilter.SHOW_ELEMENT, null);
    const toRemove: Element[] = [];
    while (walker.nextNode()) {
      const el = walker.currentNode as Element;
      if (!allowedTags.has(el.tagName)) {
        toRemove.push(el);
        continue;
      }
      // Strip all attributes except style-safe ones (we remove all for safety)
      while (el.attributes.length > 0) {
        el.removeAttribute(el.attributes[0].name);
      }
    }
    toRemove.forEach((el) => {
      const parent = el.parentNode;
      if (!parent) return;
      while (el.firstChild) parent.insertBefore(el.firstChild, el);
      parent.removeChild(el);
    });
    return template.innerHTML;
  }

  function textToHtml(text: string): string {
    // Convert plain text with newlines to <div> with <br>
    const escaped = text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
    return escaped.replace(/\n/g, '<br>');
  }


  return (
    <div 
      className="min-h-screen flex items-center justify-center p-2 sm:p-4 relative animate-background-shift"
      style={{
        backgroundImage: 'url(/tulip.png)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundAttachment: 'fixed'
      }}
    >
      {/* Audio element cho nh·∫°c n·ªÅn */}
      <audio ref={audioRef} src="/cute songs.mp3" preload="auto" />
      
      {/* N√∫t ƒëi·ªÅu khi·ªÉn nh·∫°c */}
      <motion.button
        onClick={toggleMusic}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        className="fixed top-4 right-4 z-50 bg-white/80 backdrop-blur-sm rounded-full p-3 shadow-lg hover:bg-white/90 transition-all duration-300"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 1 }}
      >
        {(isMuted || showMusicPrompt) ? (
          <VolumeX className="w-6 h-6 text-pink-500" />
        ) : (
          <Volume2 className="w-6 h-6 text-pink-500" />
        )}
      </motion.button>

      {/* Th√¥ng b√°o khi autoplay b·ªã ch·∫∑n */}
      {showMusicPrompt && (
        <motion.div
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          className="fixed top-20 right-4 z-50 bg-pink-500 text-white px-4 py-3 rounded-lg shadow-lg max-w-xs"
        >
          <div className="flex items-center gap-2">
            <VolumeX className="w-5 h-5" />
            <div>
              <p className="font-medium text-sm">Nh·∫°c n·ªÅn ch∆∞a b·∫≠t</p>
              <p className="text-xs opacity-90">T∆∞∆°ng t√°c b·∫•t k·ª≥ ƒë·ªÉ b·∫≠t nh·∫°c</p>
            </div>
          </div>
        </motion.div>
      )}
      
      {/* Overlay ƒë·ªÉ l√†m m·ªù background v√† tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n */}
      <div className="absolute inset-0 bg-gradient-to-br from-pink-50/60 via-pink-25/50 to-rose-50/60 backdrop-blur-sm"></div>
      
      {/* Hi·ªáu ·ª©ng ph√°o hoa */}
      {showFireworks && <Fireworks />}
      
      {/* B·ª©c th∆∞ */}
      {showLetter && (
        <motion.div
          initial={{ opacity: 0, scale: 0 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.8, type: "spring" }}
          className="fixed inset-0 flex items-center justify-center z-50"
        >
          <motion.div
            className="relative cursor-pointer"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleOpenLetter}
          >
            {/* B·ª©c th∆∞ */}
            <motion.div
              className="relative w-72 h-80 bg-gradient-to-br from-pink-100 to-rose-100 rounded-xl shadow-2xl"
              animate={{
                y: [-8, 8, -8],
                rotate: [-1, 1, -1]
              }}
              transition={{
                duration: 4,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            >
              {/* Phong b√¨ th∆∞ */}
              <div className="absolute inset-0 bg-gradient-to-br from-pink-200 to-rose-200 rounded-xl shadow-lg">
                {/* N·∫Øp phong b√¨ */}
                <div className="absolute top-0 left-0 right-0 h-36 bg-gradient-to-br from-pink-300 to-rose-300 rounded-t-xl transform origin-top transition-transform duration-500 hover:rotate-x-180">
                  <div className="absolute top-4 left-4 right-4 h-28 bg-gradient-to-br from-pink-400 to-rose-400 rounded-t-xl"></div>
                </div>
                
                {/* N·ªôi dung b·ª©c th∆∞ */}
                <div className="absolute top-36 left-4 right-4 bottom-4 bg-white rounded-b-xl p-6">
                  <div className="text-center">
                    <Heart className="w-10 h-10 text-pink-500 mx-auto mb-3" />
                    <h3 className="text-xl font-bold text-pink-600 mb-3">
                      Th∆∞ g·ª≠i {name}
                    </h3>
                    <p className="text-base text-pink-500 mb-4">
                      Nh·∫•n ƒë·ªÉ m·ªü th∆∞
                    </p>
                    <div className="flex justify-center space-x-3">
                      {[...Array(5)].map((_, i) => (
                        <motion.div
                          key={i}
                          animate={{ 
                            scale: [0.8, 1.3, 0.8],
                            opacity: [0.3, 1, 0.3],
                            rotate: [0, 180, 360]
                          }}
                          transition={{
                            duration: 2,
                            repeat: Infinity,
                            delay: i * 0.3,
                            ease: "easeInOut"
                          }}
                        >
                          <Sparkles className="w-5 h-5 text-pink-400" />
                        </motion.div>
                      ))}
                    </div>
                  </div>
                </div>
                
                {/* Tem th∆∞ */}
                <div className="absolute top-3 right-3 w-14 h-10 bg-gradient-to-br from-pink-500 to-rose-500 rounded-lg border-2 border-pink-600">
                  <div className="text-center text-white text-sm font-bold leading-10">20/10</div>
                </div>
              </div>
            </motion.div>
            
            {/* Hi·ªáu ·ª©ng l·∫•p l√°nh xung quanh */}
            {[...Array(12)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute"
                style={{
                  left: `${15 + (i * 6)}%`,
                  top: `${20 + (i % 3) * 25}%`
                }}
                animate={{
                  scale: [0, 1.2, 0],
                  opacity: [0, 1, 0],
                  rotate: [0, 360, 720]
                }}
                transition={{
                  duration: 3,
                  repeat: Infinity,
                  delay: i * 0.4,
                  ease: "easeInOut"
                }}
              >
                <Sparkles className="w-4 h-4 text-pink-300" />
              </motion.div>
            ))}
          </motion.div>
        </motion.div>
      )}
      
      <ResponsiveContainer>
        {!showWish && !showLetter && !showFireworks ? (
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="bg-white/70 backdrop-blur-sm rounded-2xl sm:rounded-3xl shadow-xl p-4 sm:p-6 md:p-8 text-center relative z-10"
          >
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
              className="mb-6"
            >
              <Heart className="w-12 h-12 sm:w-16 sm:h-16 text-pink-400 mx-auto mb-4" />
              <h1 className="text-2xl sm:text-3xl font-bold text-pink-500 mb-2">
                Ch√∫c m·ª´ng ng√†y 20/10
              </h1>
              <p className="text-pink-400 text-base sm:text-lg">
                Ng√†y Ph·ª• N·ªØ Vi·ªát Nam
              </p>
            </motion.div>

            <motion.form
              onSubmit={handleSubmit}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.4 }}
              className="space-y-6"
            >
              <div className="flex items-center justify-center gap-2 rounded-xl p-2">
                <button
                  type="button"
                  onClick={() => {
                    setMode('self');
                    setEditorHtml('');
                    setSelectedWish(null);
                    setShareUrl('');
                    setShowQRCode(false);
                    setCopied(false);
                  }}
                  className={`px-4 py-2 rounded-lg text-sm sm:text-base font-medium ${mode === 'self' ? 'bg-pink-500 text-white' : 'bg-pink-100 text-pink-600 hover:bg-pink-200'}`}
                >
                  Nh·∫≠n cho b·∫£n th√¢n
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setMode('send');
                    setEditorHtml('');
                    setSelectedWish(null);
                    setShareUrl('');
                    setShowQRCode(false);
                    setCopied(false);
                  }}
                  className={`px-4 py-2 rounded-lg text-sm sm:text-base font-medium ${mode === 'send' ? 'bg-pink-500 text-white' : 'bg-pink-100 text-pink-600 hover:bg-pink-200'}`}
                >
                  G·ª≠i cho ng∆∞·ªùi kh√°c
                </button>
              </div>

              <div>
                <label className="block text-pink-500 font-medium mb-2">
                  {mode === 'self' ? 'Nh·∫≠p t√™n c·ªßa b·∫°n ·ªü ƒë√¢y n√® !!!' : 'T√™n ng∆∞·ªùi nh·∫≠n'}
                </label>
                <input
                  type="text"
                  value={name}
                  onChange={(e) => {
                    setName(e.target.value);
                    // Reset c√°c state li√™n quan khi thay ƒë·ªïi t√™n
                    setSelectedWish(null);
                    setShareUrl('');
                    setShowQRCode(false);
                    setCopied(false);
                  }}
                  placeholder={mode === 'self' ? 'T√™n c·ªßa n√†ng l√† g√¨ ... ??' : 'T√™n ng∆∞·ªùi nh·∫≠n l√† g√¨ ... ??'}
                  className="w-full px-3 sm:px-4 py-2 sm:py-3 rounded-xl sm:rounded-2xl border-2 border-pink-100 focus:border-pink-300 focus:outline-none text-center text-base sm:text-lg placeholder-pink-200"
                  required
                />
              </div>

              {mode === 'send' && (
              <div>
                <label className="block text-pink-500 font-medium mb-2">
                  N·ªôi dung l·ªùi ch√∫c
                </label>
                <div className="mb-2">
                    <label className="text-pink-500 text-sm mr-2">Font:</label>
                    <select
                      value={selectedFont}
                      onChange={(e) => {
                        setSelectedFont(e.target.value);
                        // Reset c√°c state li√™n quan khi thay ƒë·ªïi font
                        setSelectedWish(null);
                        setShareUrl('');
                        setShowQRCode(false);
                        setCopied(false);
                      }}
                      className="border-2 border-pink-100 rounded-lg px-3 py-2 text-sm"
                    >
                      <option value="Inter, Arial, sans-serif">Inter (m·∫∑c ƒë·ªãnh)</option>
                      <option value="'Times New Roman', Times, serif">Times New Roman</option>
                      <option value="Georgia, serif">Georgia</option>
                      <option value="'Comic Sans MS', 'Comic Sans', cursive">Comic Sans</option>
                      <option value="'Courier New', Courier, monospace">Courier New</option>
                      <option value="'Dancing Script', cursive">Dancing Script (Google)</option>
                      <option value="'Pacifico', cursive">Pacifico (Google)</option>
                      <option value="'Great Vibes', cursive">Great Vibes (Google)</option>
                      <option value="'Lobster', cursive">Lobster (Google)</option>
                      <option value="'Playfair Display', serif">Playfair Display (Google)</option>
                    </select>
                  </div>
                
                <RichTextEditor
                  content={editorHtml}
                  onChange={(content) => {
                    setEditorHtml(content);
                    // Reset c√°c state li√™n quan khi thay ƒë·ªïi n·ªôi dung
                    setSelectedWish(null);
                    setShareUrl('');
                    setShowQRCode(false);
                    setCopied(false);
                  }}
                  fontFamily={selectedFont}
                  className="relative"
                />
                
              </div>
              )}

              <motion.button
                type="submit"
                whileHover={{ 
                  scale: 1.05,
                  boxShadow: "0 20px 25px -5px rgba(236, 72, 153, 0.3), 0 10px 10px -5px rgba(236, 72, 153, 0.1)"
                }}
                whileTap={{ scale: 0.95 }}
                animate={showFireworks ? { 
                  scale: [1, 1.1, 1],
                  boxShadow: [
                    "0 10px 15px -3px rgba(236, 72, 153, 0.1)",
                    "0 25px 50px -12px rgba(236, 72, 153, 0.5)",
                    "0 10px 15px -3px rgba(236, 72, 153, 0.1)"
                  ]
                } : {}}
                transition={{ duration: 0.3 }}
                className="w-full bg-gradient-to-r from-pink-400 to-rose-400 text-white font-bold py-3 sm:py-4 px-4 sm:px-6 rounded-xl sm:rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center gap-2 text-sm sm:text-base"
              >
                <Heart className="w-5 h-5" />
                {mode === 'self' ? 'Nh·∫≠n l·ªùi ch√∫c' : 'T·∫°o l·ªùi ch√∫c'}
                <Sparkles className="w-5 h-5" />
              </motion.button>
            </motion.form>

            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.6 }}
              className="mt-8 flex justify-center space-x-2"
            >
              {[...Array(5)].map((_, i) => (
                <motion.div
                  key={i}
                  animate={{ 
                    scale: [1, 1.2, 1],
                    opacity: [0.5, 1, 0.5]
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    delay: i * 0.2
                  }}
                >
                  <Heart className="w-4 h-4 text-pink-400" />
                </motion.div>
              ))}
            </motion.div>
          </motion.div>
        ) : showWish ? (
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.8, type: "spring" }}
            className="bg-white/75 backdrop-blur-sm rounded-2xl sm:rounded-3xl shadow-xl p-4 sm:p-6 md:p-8 text-center relative z-10"
          >
            <motion.div
              initial={{ y: -20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.3 }}
              className="mb-6"
            >
              <motion.div
                initial={{ scale: 0, rotate: -180 }}
                animate={{ scale: 1, rotate: 0 }}
                transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
                className="mb-4"
              >
                <IconComponent className={`w-16 h-16 sm:w-20 sm:h-20 ${displayIconColor} mx-auto animate-pulse`} />
              </motion.div>
              <h2 className="text-xl sm:text-2xl font-bold text-pink-500 mb-2">
                Th∆∞ g·ª≠i t·ªõi {name} üíï
              </h2>
            </motion.div>

              <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.5 }}
              className="bg-gradient-to-r from-pink-25 to-rose-25 rounded-xl sm:rounded-2xl p-4 sm:p-6 mb-4 sm:mb-6"
            >
              <div className="text-pink-600 text-sm sm:text-base leading-relaxed text-justify" style={{ fontFamily: selectedFont }}>
                <div dangerouslySetInnerHTML={{ __html: (isLoadingSharedData ? '' : (selectedWish || ((mode === 'send') ? (sanitizeHtml(editorHtml).trim() ? sanitizeHtml(editorHtml) : textToHtml(randomWish)) : textToHtml(randomWish)))) }} />
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.7 }}
              className="flex flex-col sm:flex-row justify-center items-center space-y-3 sm:space-y-0 sm:space-x-4"
            >
              <motion.button
                onClick={() => {
                  setShowWish(false);
                  setName('');
                  setEditorHtml('');
                  setSelectedWish(null);
                  setShareUrl('');
                  setShowQRCode(false);
                  setCopied(false);
                }}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="bg-pink-400 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg sm:rounded-xl font-medium hover:bg-pink-500 transition-colors text-sm sm:text-base"
              >
                X√°c nh·∫≠n l·ªùi ch√∫c
              </motion.button>
              
              {mode === 'self' && (
              <motion.button
                onClick={handleExportLetter}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="bg-gradient-to-r from-pink-500 to-rose-500 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg sm:rounded-xl font-medium hover:from-pink-600 hover:to-rose-600 transition-all duration-300 flex items-center gap-2 text-sm sm:text-base"
              >
                <Download className="w-4 h-4" />
                L∆∞u th∆∞ d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh
              </motion.button>
              )}

              {mode === 'send' && (
              <motion.button
                onClick={handleCreateShareLink}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="bg-white text-pink-600 border border-pink-200 px-4 sm:px-6 py-2 sm:py-3 rounded-lg sm:rounded-xl font-medium hover:bg-pink-50 transition-all duration-300 flex items-center gap-2 text-sm sm:text-base"
              >
                {copied ? <Check className="w-4 h-4" /> : <LinkIcon className="w-4 h-4" />}
                {copied ? 'ƒê√£ copy link' : 'T·∫°o link chia s·∫ª'}
              </motion.button>
              )}
            </motion.div>

            {/* QR Code Generator - ƒê∆°n gi·∫£n nh∆∞ Me-QR */}
            {showQRCode && shareUrl && (
              <div className="mt-6 flex flex-col items-center">
                <QRCodeGenerator url={shareUrl} />
                <button
                  onClick={() => {
                    setShowQRCode(false);
                    setShareUrl('');
                    setCopied(false);
                  }}
                  className="mt-3 text-sm text-gray-500 hover:text-gray-700 underline"
                >
                  ƒê√≥ng QR code
                </button>
              </div>
            )}

            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.9 }}
              className="mt-6 flex justify-center space-x-1"
            >
              {[...Array(8)].map((_, i) => (
                <motion.div
                  key={i}
                  animate={{ 
                    y: [0, -10, 0],
                    opacity: [0.3, 1, 0.3]
                  }}
                  transition={{
                    duration: 1.5,
                    repeat: Infinity,
                    delay: i * 0.1
                  }}
                >
                  <Sparkles className="w-3 h-3 text-pink-400" />
                </motion.div>
              ))}
            </motion.div>
          </motion.div>
        ) : null}
      </ResponsiveContainer>
    </div>
  );
}

export default function Home() {
  return (
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center" style={{
        backgroundImage: 'url(/tulip.png)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundAttachment: 'fixed'
      }}>
        <ResponsiveContainer>
          <div className="bg-white/75 backdrop-blur-sm rounded-2xl shadow-xl p-6 text-center">
            <div className="animate-pulse">
              <div className="w-16 h-16 bg-pink-200 rounded-full mx-auto mb-4"></div>
              <div className="h-4 bg-pink-200 rounded w-3/4 mx-auto mb-2"></div>
              <div className="h-4 bg-pink-200 rounded w-1/2 mx-auto"></div>
            </div>
          </div>
        </ResponsiveContainer>
      </div>
    }>
      <HomeContent />
    </Suspense>
  );
}